"-------------------------------------------------------------------------------
" Identify platform
"-------------------------------------------------------------------------------
silent function! OSX()
return has('macunix')
endfunction

silent function! LINUX()
return has('unix') && !has('macunix') && !has('win32unix')
endfunction

silent function! WINDOWS()
return  (has('win32') || has('win64')) || has("multi_byte")
endfunction

if WINDOWS()
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
endif


 "Ctrl-A 选中所有内容
noremap <silent>  <Leader>a  gg v G

" 缩写 ,ctrl-v取消效果
iab @i wscrlhs@gmail.com

" ctrl+s 实现保存功能
nmap <C-S> :w<CR>
vmap <C-S> <C-C>:w<CR>
imap <C-S> <Esc>:w<CR>


Plug 'neoclide/coc-yaml'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
" 这个插件需要私人定制 https://keelii.com/2018/08/26/vim-plugin-ultisnips-advanced-tips/
Plug 'SirVer/ultisnips'

" <leader>cc 注释当前行和选中行
" <leader>cn 没有发现和\cc有区别
" <leader>c<空格> 如果被选区域有部分被注释，则对被选区域执行取消注释操作，其它情况执行反转注释操作
" <leader>cm 对被选区域用一对注释符进行注释，前面的注释对每一行都会添加注释
" <leader>ci 执行反转注释操作，选中区域注释部分取消注释，非注释部分添加注释
" <leader>cs 添加性感的注释，代码开头介绍部分通常使用该注释
" <leader>cy 添加注释，并复制被添加注释的部分
" <leader>c$ 注释当前光标到改行结尾的内容
" <leader>cA 跳转到该行结尾添加注释，并进入编辑模式
" <leader>ca 转换注释的方式，比如： /**/和//
" <leader>cl \cb 左对齐和左右对其，左右对其主要针对/**/
" <leader>cu 取消注释

"-------------------------------------------------------------------------------
"  函数
"-------------------------------------------------------------------------------
"拼写检查
if has('spell')
  setglobal spelllang=en_us
  setglobal spellfile=~/.vim/spell/en.utf-8.add
  "if &rtp =~# 'Dropbox.Code.vim'
  "  setglobal spellfile^=~/Dropbox/Code/vim/spell/en.utf-8.add
  "endif
  let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
  autocmd FileType help if &buftype ==# 'help' | setlocal nospell | endif
endif


"统计中文字数
function! ChineseCount() range
	let save = @z
	silent exec 'normal! gv"zy'
	let text = @z
	let @z = save
	silent exec 'normal! gv'
	let cc = 0
	for char in split(text, '\zs')
		if char2nr(char) >= 0x2000
			let cc += 1
		endif
	endfor
	echo "Count of Chinese charasters is:"
	echo cc
endfunc

vnoremap <F7> :call ChineseCount()<cr>

" 不再使用的
Plug 'vimwiki/vimwiki'
Plug 'itchyny/calendar.vim'

"-------------------------------------------------------------------------------
" YouCompleteMe 
"-------------------------------------------------------------------------------
if isdirectory(expand("~/.vim/plugged/YouCompleteMe/"))
	if OSX()
		let g:acp_enableAtStartup = 0

		" enable completion from tags
		let g:ycm_collect_identifiers_from_tags_files = 1

		" remap Ultisnips for compatibility for YCM
		let g:UltiSnipsExpandTrigger = '<C-j>'
		let g:UltiSnipsJumpForwardTrigger = '<C-j>'
		let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
		let g:ycm_key_invoke_completion = '<c-z>'

		" Enable omni completion.
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
		autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
		autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
		autocmd FileType javascript nmap <buffer> <C-]> :YcmCompleter GoTo<CR>

	   " 颜色配置
	   "highlight Pmenu ctermfg=12 ctermbg=0 guifg=#ffffff guibg=#000000
	   "highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black
	   "highlight Conceal guifg=White guibg=Red
	   " 由于YCM的警告语句在黑色终端下配色很模糊，修改成较为高亮的蓝底黑字
	   "highlight link YcmWarningSection Pmenu

		" Haskell post write lint and check with ghcmod
		" $ `cabal install ghcmod` if missing and ensure
		" ~/.cabal/bin is in your $PATH.
		if !executable("ghcmod")
			autocmd BufWritePost *.hs GhcModCheckAndLintAsync
		endif

		" For snippet_complete marker.
		if !exists("g:spf13_no_conceal")
			if has('conceal')
				set conceallevel=2 concealcursor=i
			endif
		endif

		" Disable the neosnippet preview candidate window
		" When enabled, there can be too much visual noise
		" especially when splits are used.
		set completeopt-=preview

		" lsp-service
		let s:lsp = '/Users/wscrlhs/work/github/lsp-examples'
		let g:ycm_language_server = [
			\   {
			\     'name': 'php',
			\     'cmdline': [ 'php', expand( s:lsp . '/php/vendor/bin/php-language-server.php' ) ],
			\     'filetypes': [ 'php' ],
			\     'lua': ['.', ':'],
			\   },
			\ ]
	endif
endif



"-------------------------------------------------------------------------------
" vim-wiki
" Basic key bindings
" <Leader>ww -- Open default wiki index file.
" <Leader>wt -- Open default wiki index file in a new tab.
" <Leader>ws -- Select and open wiki index file.
" <Leader>wd -- Delete wiki file you are in.
" <Leader>wr -- Rename wiki file you are in.
" <Enter> -- Follow/Create wiki link.
" <Shift-Enter> -- Split and follow/create wiki link.
" <Ctrl-Enter> -- Vertical split and follow/create wiki link.
" <Backspace> -- Go back to parent(previous) wiki link.
" <Tab> -- Find next wiki link.
" <Shift-Tab> -- Fid previous wiki link.
" Advanced key bindings
" Refer to the complete documentation at :h vimwiki-mappings to see many more bindings.
"-------------------------------------------------------------------------------
   " calendar
	map <F8> :Calendar<cr>
	autocmd FileType calendar nmap <buffer> <CR> :<C-u>call vimwiki#diary#calendar_action(b:calendar.day().get_day(), b:calendar.day().get_month(), b:calendar.day().get_year(), b:calendar.day().week(), "V")<CR>

	let g:vimwiki_list = [{'path': '~/doc/vim/vimwiki/', 'ext': '.md', 'syntax': 'markdown'}]

	 <leader>ww 在当前窗口打开维基首页
	 <leader>wt 在新tab打开维基首页
	 <leader>w<leader>w 打开/新建当天日记
	 <leader>w<keader>t 在新tab打开/新建当天日记
	 <leader>ws 选择维基项目（详见下面的“多个维基项目”一节）


"-------------------------------------------------------------------------------
" LeaderF
"-------------------------------------------------------------------------------
if isdirectory(expand("~/.vim/plugged/LeaderF/"))
	" don't show the help in normal mode
	let g:Lf_HideHelp = 1
	let g:Lf_UseCache = 0
	let g:Lf_UseVersionControlTool = 0
	let g:Lf_IgnoreCurrentBufferName = 1
	" popup mode
	let g:Lf_WindowPosition = 'popup'
	let g:Lf_PreviewInPopup = 1
	let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
	let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
	let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}

	let g:Lf_NormalCommandMap = {
		 \ "*":      {
		 \               "<C-Down>": "<C-J>",
		 \               "<C-Up>":   "<C-K>"
		 \           },
		 \ "File":   {
		 \               "q":     "<Esc>",
		 \               "a":     "<C-A>",
		 \               "<Esc>": "<C-W>",
		 \           },
		 \ "Buffer": {},
		 \ "Mru":    {},
		 \ "Tag":    {},
		 \ "BufTag": {},
		 \ "Function": {},
		 \ "Line":   {},
		 \ "History":{},
		 \ "Help":   {},
		 \ "Rg":     {},
		 \ "Gtags":  {},
		 \ "Colorscheme": {}
		 \}

	 let g:Lf_ShortcutF = "<leader>ff"
	 nnoremap <silent> <Leader>rg :Leaderf rg<CR>
	 nnoremap <silent> <Leader>mru :Leaderf mru<CR>
	 noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
	 noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
	 noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
	 noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

	 noremap<C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>
	 noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>

	 " search visually selected text literally
	 xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
	 noremap go :<C-U>Leaderf! rg --recall<CR>

endif


